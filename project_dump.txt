
========================================
.\dashboard.html
========================================
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Total Resource Dashboard</title>
</head>
<body>
  <h1>Global Resource Dashboard</h1>
  <a href="index.html">‚Üê Back to Base Editor</a>
  <div id="summary"></div>
  <script src="script.js"></script>
  <script>
    renderTotalSummary();
  </script>
</body>
</html>


========================================
.\index.html
========================================
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Dune Awakening Resource Tracker</title>
</head>
<body>
  <h1>Dune Awakening Resource Tracker</h1>

  <label for="base">Select Base:</label>
  <select id="baseSelect"></select>
  <button onclick="addBase()">+ Add Base</button>

  <div id="resourceSection"></div>

  <script src="script.js"></script>
</body>
</html>


========================================
.\refining.html
========================================
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Crafting & Refining Recipes</title>
</head>
<body>
  <h1>Refining Recipe Manager</h1>
  <a href="index.html">‚Üê Back to Base Manager</a>

  <h2>Resources</h2>
  <div id="resourceList"></div>
  <input id="newResource" placeholder="New resource name" />
  <button onclick="addResource()">+ Add Resource</button>

  <h2>Recipes</h2>
  <div id="recipeList"></div>

  <h3>Create New Recipe</h3>
  <input id="recipeName" placeholder="Recipe name" /><br>
  <textarea id="recipeInputs" placeholder="Inputs (e.g., 50 Water, 5 Flour Sand)"></textarea><br>
  <textarea id="recipeOutputs" placeholder="Outputs (e.g., 1 Silicon Block)"></textarea><br>
  <button onclick="addRecipe()">+ Add Recipe</button>

  <script src="script.js"></script>
  <script>
    renderResources();
    renderRecipes();
  </script>
</body>
</html>


========================================
.\script.js
========================================
let state = JSON.parse(localStorage.getItem("duneState")) || {
  bases: {
    "Arrakis North": { resources: {}, refiners: [] },
    "Arrakis South": { resources: {}, refiners: [] },
    "Spice Ridge": { resources: {}, refiners: [] },
    "Deep Dunes": { resources: {}, refiners: [] },
  },
  selectedBase: "Arrakis North"
};

function saveState() {
  localStorage.setItem("duneState", JSON.stringify(state));
}

function addBase() {
  const name = prompt("Enter new base name:");
  if (!name || state.bases[name]) return;
  state.bases[name] = { resources: {}, refiners: [] };
  state.selectedBase = name;
  updateBaseSelect();
  renderResourceEditor();
  saveState();
}

function updateBaseSelect() {
  const select = document.getElementById("baseSelect");
  if (!select) return;
  select.innerHTML = "";
  for (let base in state.bases) {
    const opt = document.createElement("option");
    opt.value = opt.textContent = base;
    if (base === state.selectedBase) opt.selected = true;
    select.appendChild(opt);
  }
  select.onchange = () => {
    state.selectedBase = select.value;
    renderResourceEditor();
    saveState();
  };
}

function renderResourceEditor() {
  const container = document.getElementById("resourceEditor");
  if (!container || !state.selectedBase) return;

  container.innerHTML = "";
  const base = state.bases[state.selectedBase];
  const resources = base.resources;

  for (let key in resources) {
    const div = document.createElement("div");
    div.innerHTML = `
      <strong>${key}:</strong>
      <input type="number" value="${resources[key]}" onchange="updateResource('${key}', this.value)">
      <button onclick="deleteResource('${key}')">‚ùå</button>
    `;
    container.appendChild(div);
  }

  const newDiv = document.createElement("div");
  newDiv.innerHTML = `
    <input id="newResourceName" placeholder="Resource name">
    <input id="newResourceQty" type="number" placeholder="Quantity">
    <button onclick="addResource()">+ Add Resource</button>
  `;
  container.appendChild(newDiv);
}

function updateResource(key, value) {
  state.bases[state.selectedBase].resources[key] = parseInt(value) || 0;
  saveState();
}

function deleteResource(key) {
  delete state.bases[state.selectedBase].resources[key];
  renderResourceEditor();
  saveState();
}

function addResource() {
  const name = document.getElementById("newResourceName").value;
  const qty = parseInt(document.getElementById("newResourceQty").value);
  if (!name || isNaN(qty)) return;
  state.bases[state.selectedBase].resources[name] = qty;
  renderResourceEditor();
  saveState();
}

function renderTotalSummary() {
  const container = document.getElementById("summary");
  const totals = {};

  for (let baseName in state.bases) {
    const base = state.bases[baseName];
    for (let res in base.resources) {
      totals[res] = (totals[res] || 0) + base.resources[res];
    }
  }

  const table = document.createElement("table");
  for (let key in totals) {
    const row = document.createElement("tr");
    row.innerHTML = `<td><strong>${key}</strong></td><td>${totals[key]}</td>`;
    table.appendChild(row);
  }
  container.innerHTML = "<h2>Resource Totals</h2>";
  container.appendChild(table);
}

// Default refining data
if (!state.resources) state.resources = [];
if (!state.recipes) state.recipes = [];

function addResource() {
  const input = document.getElementById("newResource");
  const name = input.value.trim();
  if (!name || state.resources.includes(name)) return;
  state.resources.push(name);
  input.value = "";
  saveState();
  renderResources();
}

function renderResources() {
  const list = document.getElementById("resourceList");
  if (!list) return;
  list.innerHTML = "";
  state.resources.forEach((res, i) => {
    const div = document.createElement("div");
    div.innerHTML = `
      ${res}
      <button onclick="removeResource(${i})">‚ùå</button>
    `;
    list.appendChild(div);
  });
}

function removeResource(index) {
  state.resources.splice(index, 1);
  saveState();
  renderResources();
}

function addRecipe() {
  const name = document.getElementById("recipeName").value.trim();
  const inputs = document.getElementById("recipeInputs").value.trim();
  const outputs = document.getElementById("recipeOutputs").value.trim();

  if (!name || !inputs || !outputs) return;

  state.recipes.push({ name, inputs, outputs });
  document.getElementById("recipeName").value = "";
  document.getElementById("recipeInputs").value = "";
  document.getElementById("recipeOutputs").value = "";

  saveState();
  renderRecipes();
}

function renderRecipes() {
  const list = document.getElementById("recipeList");
  if (!list) return;
  list.innerHTML = "";
  state.recipes.forEach((recipe, i) => {
    const div = document.createElement("div");
    div.innerHTML = `
      <strong>${recipe.name}</strong><br>
      üîπ Inputs: ${recipe.inputs}<br>
      üî∏ Outputs: ${recipe.outputs}<br>
      <button onclick="removeRecipe(${i})">‚ùå Delete</button>
      <hr>
    `;
    list.appendChild(div);
  });
}

function removeRecipe(index) {
  state.recipes.splice(index, 1);
  saveState();
  renderRecipes();
}


// Init if on index.html
if (window.location.pathname.endsWith("index.html") || window.location.pathname === "/") {
  updateBaseSelect();
  renderResourceEditor();
}


========================================
.\style.css
========================================

